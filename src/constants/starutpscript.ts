/*
f = app.vault.getAbstractFileByPath("startuphooks.md");
s = await app.vault.read(f);
ea = ExcalidrawAutomate;
url = await ea.convertStringToDataURL(s);
window.navigator.clipboard.writeText(`export const startupScript = () => atob("${url.split("data:text/html;base64,")[1]}");`);
console.log("String copied to clipboard");
*/

export const startupScript = () => atob("");